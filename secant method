#include<bits/stdc++.h>
using namespace std;
double secantMethod(double a, double b, double c, double x0, double x1, double tolerance, int maxIterations) 
{
    int iteration = 0;

    while (iteration < maxIterations) 
    {
        double fx0 = quadraticFunction(a, b, c, x0);
        double fx1 = quadraticFunction(a, b, c, x1);

        if (fx1 - fx0 == 0.0) 
        {
            std::cout << "Division by zero, secant method failed." << std::endl;
            return std::numeric_limits<double>::quiet_NaN();
        }

        double x2 = x1 - fx1 * (x1 - x0) / (fx1 - fx0);

        if (std::abs(x2 - x1) < tolerance) 
        {
            std::cout << "Converged after " << iteration << " iterations." << std::endl;
            return x2;
        }

        x0 = x1;
        x1 = x2;
        iteration++;
    }

    std::cout << "Secant method did not converge after " << maxIterations << " iterations." << std::endl;
    return std::numeric_limits<double>::quiet_NaN();
}

int main() 
{
    double a = 1.0;           // Coefficient of x^2
    double b = -3.0;          // Coefficient of x
    double c = 2.0;           // Constant term
    double x0 = 1.0;          // Initial guess for root x0
    double x1 = 2.0;          // Initial guess for root x1
    double tolerance = 1e-6;  // Tolerance for convergence
    int maxIterations = 100;  // Maximum number of iterations

    double root = secantMethod(a, b, c, x0, x1, tolerance, maxIterations);
    if (!std::isnan(root)) 
    {
        std::cout << "Approximate root: " << root << std::endl;
    }

    return 0;
}
